# 10.0.1.x
# 192.168.1.x

events {
	worker_connections 1024;
}
http {
	log_format upstreamlog '[$time_iso8601] $remote_addr - $server_name 	=> $upstream_addr:	$request [tUps: $upstream_response_time tReq: $request_time]';
	upstream frontend {
		server {your_local_ip}:3001;
	}

	upstream backend {
		server {your_local_ip}:3000;
	}

	server {
		listen				443 ssl http2;
		listen				3032 http2;
		server_name			beta.argu.local;

		root				/etc/nginx/www;
		access_log			/dev/fd/1 upstreamlog;
		error_log			/dev/fd/1;

		ssl_certificate		/etc/nginx/ssl/nginx.crt;
		ssl_certificate_key	/etc/nginx/ssl/nginx.key;

		add_header	Content-Security-Policy	"default-src 'self'; child-src 'self' blob:; img-src *; script-src 'self' 'unsafe-eval' 'unsafe-inline' cdn.polyfill.io; style-src 'self' 'unsafe-inline' maxcdn.bootstrapcdn.com fonts.googleapis.com; font-src 'self' 'data:' maxcdn.bootstrapcdn.com fonts.googleapis.com fonts.gstatic.com";

		proxy_set_header	Host				$host;
		proxy_set_header	X-Real-IP			$remote_addr;
		proxy_set_header	X-Forwarded-for		$proxy_add_x_forwarded_for;
		proxy_set_header	X-Forwarded-Proto	https;
		proxy_set_header	X-Forwarded-Ssl		on;
		proxy_pass_request_headers				on;

		merge_slashes off;

		location /aod_search/ {
			proxy_pass https://aod-search.argu.co/aod_search/;
		}

		location / {
			proxy_pass http://frontend;
		}
	}

	server {
		listen				3032 http2;
		listen				443 ssl http2 deferred;
		server_name			argu.local;

		root				/etc/nginx/www;
		access_log			/dev/fd/1 upstreamlog;
		error_log			/dev/fd/1;
		sendfile			on;

		ssl_certificate		/etc/nginx/ssl/nginx.crt;
		ssl_certificate_key	/etc/nginx/ssl/nginx.key;
		add_header			Content-Security-Policy	"default-src 'self'; img-src *; script-src 'self' 'unsafe-eval' 'unsafe-inline' cdn.polyfill.io; style-src 'self' 'unsafe-inline' maxcdn.bootstrapcdn.com fonts.googleapis.com; font-src 'self' fonts.googleapis.com fonts.gstatic.com";

		proxy_set_header	Host				$host;
		proxy_set_header	X-Real-IP			$remote_addr;
		proxy_set_header	X-Forwarded-for		$proxy_add_x_forwarded_for;
		proxy_set_header	X-Forwarded-Proto	https;
		proxy_set_header	X-Forwarded-Ssl		on;
		proxy_pass_request_headers				on;

		merge_slashes off;

		location / {
			try_files $uri $uri/ @backend;
		}
		location @backend {
			proxy_pass http://backend;
		}
	}
}

