image: registry.gitlab.com/ontola/core:ci-8afda5b0b751f870848dd96c8fe3e137cda26b52

variables:
  DOCKER_HOST: tcp://localhost:2376
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  RUBY_VERSION: 2.7.2

services:
  - docker:18.09.7-dind

image-ci-build:
  stage: ci_meta_build
  script:
    - docker build --build-arg RUBY_VERSION=$RUBY_VERSION -t $CI_REGISTRY_IMAGE:ci-$CI_COMMIT_SHA -f dockerfiles/ci.Dockerfile ./dockerfiles
    - docker push $CI_REGISTRY_IMAGE:ci-$CI_COMMIT_SHA
  rules:
    - changes:
        - ./dockerfiles/ci.Dockerfile

image-testrunner-base-build:
  stage: ci_meta_build
  script:
    - docker build -t $CI_REGISTRY_IMAGE:testrunner-base-$CI_COMMIT_SHA -f dockerfiles/testrunner-base.Dockerfile ./dockerfiles
    - docker push $CI_REGISTRY_IMAGE:testrunner-base-$CI_COMMIT_SHA
  rules:
    - changes:
        - ./dockerfiles/testrunner-base.Dockerfile

image-ci-tag-latest:
  stage: ci_meta_tag
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - docker tag $CI_REGISTRY_IMAGE:ci-$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:ci-latest
    - docker push $CI_REGISTRY_IMAGE:ci-latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

image-testrunner-base-tag-latest:
  stage: ci_meta_tag
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - docker tag ${CI_REGISTRY_IMAGE}:testrunner-base-$CI_COMMIT_SHA ${CI_REGISTRY_IMAGE}:testrunner-base-latest
    - docker push ${CI_REGISTRY_IMAGE}:testrunner-base-latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

test:
  stage: test
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - sudo sh -c "echo '127.0.0.1 app.argu.localtest' >> /etc/hosts"
    - sudo sh -c "echo '127.0.0.1 argu.localtest' >> /etc/hosts"
    - sudo sh -c "echo '127.0.0.1 demogemeente.localdev' >> /etc/hosts"
    - sudo sh -c "echo '127.0.0.1 veiligheidsinterventies.localdev' >> /etc/hosts"
    - ruby -v
  script:
    - echo "" > ./.env.dev
    - echo DEFAULT_LOCALE=en >> ./.env.template
    - sed -i "s/{bugsnag_key}/$BUGSNAG_KEY/g" ./.env.template
    - BACKEND_HOST=argu:3000 ./setup.sh
    - TESTRUNNER=true IP=127.0.0.1 HOST_IP=172.99.0.1 ENV=test ./setup_environment.rb
    - sudo chown -R $(whoami):$(whoami) ./ssl
    - "[[ $CI_COMMIT_BRANCH	= master ]] && RAILS_ENV=production || RAILS_ENV=staging"
    - docker create -v /cfg --name certdata alpine:3.4 /bin/true
    - sudo chown -R $(whoami):$(whoami) ./devproxyCA
    - docker cp ./devproxyCA/cacert.pem certdata:/cacert.pem
    - RAILS_ENV=$RAILS_ENV docker-compose pull
    - docker-compose up -d postgres elastic devproxy
    - docker-compose up -d rabbitmq mailcatcher redis
    - RAILS_ENV=$RAILS_ENV docker-compose up -d argu argu_worker
    - RAILS_ENV=$RAILS_ENV docker-compose up apex_rs_setup # Wait until finished
    - RAILS_ENV=$RAILS_ENV docker-compose up -d token token_worker frontend email email_subscriber email_worker apex_rs apex_rs_worker
    - docker-compose build --build-arg "TEST_FILES=$TEST_FILES"
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker-compose run testrunner bundle exec rake test:initialize_db
    - docker restart devproxy_argu_1
    - ./restart.sh devproxy || true
    - docker-compose run argu bundle exec rake cache:warm
    - docker-compose run testrunner bundle exec rake test:dump
    - docker restart devproxy_argu_worker_1
    - ./restart.sh devproxy || true
    - timeout 5m bash -c 'until [ $(docker ps -f name=devproxy_argu_1 -f health=healthy -q | wc -l) -gt 0 ]; do sleep 1; done'
    - docker ps -a
    - docker images
    - 'curl -H "Host: argu.localtest" -f http://apex-rs.svc.cluster.local:3030/link-lib/d/health || true'
    - TEST_TIMEOUT=${TEST_TIMEOUT:-50m}
    - echo test timeout $TEST_TIMEOUT
    - timeout $TEST_TIMEOUT bash -c 'docker-compose run --name testrunner testrunner'
  after_script:
    - mkdir $CI_PROJECT_DIR/test-results || true
    - docker cp testrunner:/tmp/test-results/rspec.xml $CI_PROJECT_DIR/test-results/rspec.xml || true
    - docker cp testrunner:/usr/src/app/tmp/exceptions $CI_PROJECT_DIR/test-results/exceptions || true
    - docker ps --no-trunc -a > $CI_PROJECT_DIR/test-results/docker-ps.txt || true
    - docker-compose logs > $CI_PROJECT_DIR/test-results/docker-compose-logs.txt || true
    - 'curl -H "Host: argu.localtest" -f http://localhost:3030/link-lib/d/health > apex_rs_health.txt || true'
    - 'curl -H "Host: argu.localtest" -f http://localhost:3030/d/health > libro_health.txt || true'
    - ls -la $CI_PROJECT_DIR/test-results
  artifacts:
    paths:
      - /tmp/
      - test-results/
      - docker-compose.yml
    expire_in: 1 week
    when: on_failure

stages:
  - ci_meta_build
  - ci_meta_tag
  - test
