image: circleci/buildpack-deps:bionic-curl-dind

variables:
  DOCKER_DRIVER: overlay2

.bundle_base:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  services:
    - docker:18.09-dind
  before_script:
    - apk add ruby ruby-etc ruby-bigdecimal
    - gem install docker-api activesupport
  script:
    - export BUNDLE_INFO=$(./tag_release_bundle.rb ${SOURCE_TAG:-latest} $TARGET_TAG)
    - "[[ -z \"$BUNDLE_INFO\" ]] && return 1;"
    - echo $BUNDLE_INFO
    - "echo TARGET_TAG=$TARGET_TAG >> build.env"
    - "echo BUNDLE_INFO=$BUNDLE_INFO >> build.env"
  artifacts:
    reports:
      dotenv: build.env

latest_bundle:
  extends: .bundle_base
  stage: build
  variables:
    SOURCE_TAG: staging
    TARGET_TAG: v$CI_PIPELINE_ID-dev

test:
  stage: test
  services:
    - docker:18.09-dind
  needs:
    - latest_bundle
  before_script:
    - sudo apt-get update && sudo apt-get -y install ruby postgresql-client
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - sudo gem install activesupport
  script:
    - sudo sh -c "echo '127.0.0.1 app.argu.localtest' >> /etc/hosts"
    - sudo sh -c "echo '127.0.0.1 argu.localtest' >> /etc/hosts"
    - sudo sh -c "echo '127.0.0.1 demogemeente.localdev' >> /etc/hosts"
    - sudo sh -c "echo '127.0.0.1 veiligheidsinterventies.localdev' >> /etc/hosts"
    - echo "" > ./.env.dev
    - echo DEFAULT_LOCALE=en >> ./.env.template
    - sed -i "s/{bugsnag_key}/$BUGSNAG_KEY/g" ./.env.template
    - BACKEND_HOST=argu:3000 ./setup.sh
    - TESTRUNNER=true IP=127.0.0.1 HOST_IP=172.99.0.1 ENV=test ./setup_environment.rb
    - sudo chown -R $(whoami):$(whoami) ./ssl
    - TARGET_TAG=v$CI_PIPELINE_ID-dev
    - "[[ $CI_COMMIT_BRANCH	= master ]] && RAILS_ENV=production || RAILS_ENV=staging"
    - docker create -v /cfg --name certdata alpine:3.4 /bin/true
    - sudo chown -R $(whoami):$(whoami) ./devproxyCA
    - docker cp ./devproxyCA/cacert.pem certdata:/cacert.pem
    - RAILS_ENV=$RAILS_ENV TARGET_TAG=$TARGET_TAG docker-compose pull
    - docker-compose up -d postgres elastic devproxy
    - docker-compose up -d rabbitmq mailcatcher redis
    - RAILS_ENV=$RAILS_ENV TARGET_TAG=$TARGET_TAG docker-compose up -d argu argu_worker
    - RAILS_ENV=$RAILS_ENV TARGET_TAG=$TARGET_TAG docker-compose up apex_rs_setup # Wait until finished
    - RAILS_ENV=$RAILS_ENV TARGET_TAG=$TARGET_TAG docker-compose up -d token token_worker frontend email email_subscriber email_worker apex_rs apex_rs_worker
    - docker-compose build --build-arg "TEST_FILES=$TEST_FILES"
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker-compose run testrunner bundle exec rake test:initialize_db
    - docker restart devproxy_argu_1
    - ./restart.sh devproxy || true
    - docker-compose run argu bundle exec rake cache:warm
    - docker-compose run testrunner bundle exec rake test:dump
    - docker restart devproxy_argu_worker_1
    - ./restart.sh devproxy || true
    - timeout 5m bash -c 'until [ $(docker ps -f name=devproxy_argu_1 -f health=healthy -q | wc -l) -gt 0 ]; do sleep 1; done'
    - docker ps -a
    - docker images
    - 'curl -H "Host: argu.localtest" -f http://apex-rs.svc.cluster.local:3030/link-lib/d/health || true'
    - TEST_TIMEOUT=${TEST_TIMEOUT:-50m}
    - echo test timeout $TEST_TIMEOUT
    - timeout $TEST_TIMEOUT bash -c 'docker-compose run --name testrunner testrunner'
  after_script:
    - mkdir $CI_PROJECT_DIR/test-results || true
    - docker cp testrunner:/tmp/test-results/rspec.xml $CI_PROJECT_DIR/test-results/rspec.xml || true
    - docker cp testrunner:/usr/src/app/tmp/exceptions $CI_PROJECT_DIR/test-results/exceptions || true
    - docker ps --no-trunc -a > $CI_PROJECT_DIR/test-results/docker-ps.txt || true
    - docker-compose logs > $CI_PROJECT_DIR/test-results/docker-compose-logs.txt || true
    - 'curl -H "Host: argu.localtest" -f http://localhost:3030/link-lib/d/health > apex_rs_health.txt || true'
    - 'curl -H "Host: argu.localtest" -f http://localhost:3030/d/health > libro_health.txt || true'
    - ls -la $CI_PROJECT_DIR/test-results
  artifacts:
    paths:
      - test-results/
      - docker-compose.yml
    expire_in: 1 week
    when: on_failure

freeze:
  extends: .bundle_base
  stage: freeze
  when: manual
  needs:
    - test
  variables:
    SOURCE_TAG: v$CI_PIPELINE_ID-dev
    TARGET_TAG: v$CI_PIPELINE_ID

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  allow_failure: true
  needs:
    - job: freeze
      artifacts: true
  before_script:
    - apk add bash
  script:
    - "bash -c 'echo -e \"# Release v$CI_PIPELINE_ID\n\n${BUNDLE_INFO@E}\" > ./RELEASE_NOTES.md'"
    - echo Created release v$CI_PIPELINE_ID
  release:
    tag_name: v$CI_PIPELINE_ID
    description: ./RELEASE_NOTES.md

deploy_staging:
  stage: deploy
  when: manual
  needs:
    - latest_bundle
  trigger:
    project: ontola/infrastructure
    branch: "core#8-release-management"
    strategy: depend
  variables:
    COMMIT_TAG: v$CI_PIPELINE_ID-dev
    ENVIRONMENT_SLUG: staging

deploy_production:
  stage: deploy
  needs:
    - release
  trigger:
    project: ontola/infrastructure
    branch: "core#8-release-management"
    strategy: depend
  variables:
    COMMIT_TAG: v$CI_PIPELINE_ID
    ENVIRONMENT_SLUG: production

stages:
  - build
  - test
  - freeze
  - release
  - deploy
