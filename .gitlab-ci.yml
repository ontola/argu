image: docker:20

services:
  - docker:20-dind

variables:
  DOCKER_BUILDKIT: 0
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  HOST_IP: 172.99.0.1

before_script:
  - echo "$DOCKER_REGISTRY_TOKEN" | docker login --username "$DOCKER_REGISTRY_USER" --password-stdin
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin

prometheus_build:
  stage: ci_build
  script:
    - cd docker/prometheus
    - docker build -t $CI_REGISTRY_IMAGE:prometheus .
    - docker push $CI_REGISTRY_IMAGE:prometheus
  when: manual

testrunner_build:
  stage: ci_build
  script:
    - cd test
    - docker build -t registry.gitlab.com/ontola/argu:base-pw .
    - docker push registry.gitlab.com/ontola/argu:base-pw
  when: manual

libro_build:
  stage: build
  image: docker:20-cli
  services:
    - docker:20-dind
  before_script:
    - echo "$HUB_TOKEN" | docker login -u "$HUB_USER" "docker.io" --password-stdin
  script:
    - apk add git
    - LIBRO_CLIENT_TAG=$(git submodule status --cached services/libro-client | awk '{print $1;}' | tr -cd '[:alnum:]')
    - LIBRO_SERVER_TAG=$(git submodule status --cached services/libro-server | awk '{print $1;}' | tr -cd '[:alnum:]')
    - echo $LIBRO_CLIENT_TAG
    - echo $LIBRO_SERVER_TAG
    - docker buildx create --use --name new-builder
    - docker buildx build --push --platform linux/amd64,linux/arm64/v8 --tag argu/libro:${CI_COMMIT_SHA} --build-arg=LIBRO_CLIENT_TAG=$LIBRO_CLIENT_TAG --build-arg=LIBRO_SERVER_TAG=$LIBRO_SERVER_TAG ./docker/libro

tag:
  stage: tag
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - echo "$HUB_TOKEN" | docker login -u "$HUB_USER" "docker.io" --password-stdin
  script:
    - docker pull argu/libro:$CI_COMMIT_SHA
    - docker tag argu/libro:$CI_COMMIT_SHA argu/libro:$CI_COMMIT_TAG
    - docker tag argu/libro:$CI_COMMIT_SHA argu/libro:latest
    - docker push argu/libro:$CI_COMMIT_TAG
    - docker push argu/libro:latest

test:
  stage: test
  script:
    - "[[ $CI_COMMIT_BRANCH = master ]] && RAILS_ENV=production || RAILS_ENV=staging"
    - apk add bash ca-certificates curl git openssl sudo
    - echo DEFAULT_LOCALE=en >> ./.env.template
    - echo DISABLE_PROMETHEUS=true >> ./.env.template
    - sed -i "s/{bugsnag_key}/$BUGSNAG_KEY/g" ./.env.template
    - ./bin/build_testrunner.sh
    - ./bin/install.sh
    - ./bin/test.sh
    - timeout 5m bash -c 'until [ $(docker ps -f health=starting -q | wc -l) -eq 0 ]; do sleep 1; done'
    - ./bin/initialize_db.sh
    - docker-compose restart apex
    - timeout 5m bash -c 'until [ $(docker ps -f health=starting -q | wc -l) -eq 0 ]; do sleep 1; done'
    - docker-compose exec -T apex bundle exec rake cache:warm
    - ./bin/dump_db.sh
    - timeout 5m bash -c 'until [ $(docker ps -f health=starting -q | wc -l) -eq 0 ]; do sleep 1; done'
    - docker ps -a
    - docker images
    - docker-compose exec -T libro_server cat client_version.txt
    - docker-compose exec -T libro_server cat server_version.txt
    - TEST_TIMEOUT=${TEST_TIMEOUT:-50m}
    - echo test timeout $TEST_TIMEOUT
    - timeout $TEST_TIMEOUT bash -c 'docker-compose exec testrunner sh -c "bundle exec rspec --format documentation --format RSpec::Instafail --format RspecJunitFormatter --out /tmp/test-results/rspec.xml $TEST_FILES"'
  after_script:
    - mkdir $CI_PROJECT_DIR/test-results || true
    - docker cp argu-testrunner-1:/tmp/test-results/rspec.xml $CI_PROJECT_DIR/test-results/rspec.xml || true
    - docker cp argu-testrunner-1:/usr/src/app/tmp/exceptions $CI_PROJECT_DIR/test-results/exceptions || true
    - docker ps --no-trunc -a > $CI_PROJECT_DIR/test-results/docker-ps.txt || true
    - docker-compose logs > $CI_PROJECT_DIR/test-results/docker-compose-logs.txt || true
    - 'curl -H "Host: argu.localtest" -f http://localhost:3080/link-lib/cache/status > cache_health.txt || true'
    - 'curl -H "Host: argu.localtest" -f http://localhost:3080/argu/d/health > libro_health.txt || true'
    - ls -la $CI_PROJECT_DIR/test-results
  artifacts:
    paths:
      - test-results/
      - docker-compose.yml
    expire_in: 1 week
    when: on_failure

stages:
  - ci_build
  - build
  - tag
  - test
