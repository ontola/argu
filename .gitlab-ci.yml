image: circleci/buildpack-deps:bionic-curl-dind

variables:
  DOCKER_DRIVER: overlay2
  HOST_IP: 172.99.0.1

before_script:
  - sudo apt-get update && sudo apt-get -y install ruby postgresql-client
  - echo "$DOCKER_REGISTRY_TOKEN" | docker login --username "$DOCKER_REGISTRY_USER" --password-stdin
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  - sudo gem install activesupport -v 6.1.4.4
  - sudo sh -c "echo '127.0.0.1 app.argu.localtest' >> /etc/hosts"
  - sudo sh -c "echo '127.0.0.1 argu.localtest' >> /etc/hosts"
  - sudo sh -c "echo '127.0.0.1 demogemeente.localdev' >> /etc/hosts"
  - sudo sh -c "echo '127.0.0.1 frontend.svc.cluster.localdev' >> /etc/hosts"
  - echo "" > ./.env.dev
  - echo FRONTEND_SERVICE_PORT=3080 >> ./.env.template
  - echo DEFAULT_LOCALE=en >> ./.env.template
  - echo DISABLE_PROMETHEUS=true >> ./.env.template
  - sed -i "s/{bugsnag_key}/$BUGSNAG_KEY/g" ./.env.template
  - ./setup_certificate.sh
  - BACKEND_HOST=argu:3000 TESTRUNNER=true ENV=test ./setup.sh
  - sudo chown -R $(whoami):$(whoami) ./ssl
  - "[[ $CI_COMMIT_BRANCH = master ]] && RAILS_ENV=production || RAILS_ENV=staging"
  - docker create -v /cfg --name certdata alpine:3.4 /bin/true
  - sudo chown -R $(whoami):$(whoami) ./devproxyCA
  - docker cp ./devproxyCA/cacert.pem certdata:/cacert.pem

ci_build:
  stage: ci_build
  services:
    - docker:18.09-dind
  script:
    - docker build -t $CI_REGISTRY_IMAGE:base-pw -f dockerfiles/testrunner-base.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:base-pw
  rules:
    - changes:
        - ./dockerfiles/testrunner-base.Dockerfile
        - ./Gemfile.lock

prometheus_build:
  stage: ci_build
  services:
    - docker:18.09-dind
  script:
    - docker build -t $CI_REGISTRY_IMAGE:prometheus -f dockerfiles/prometheus.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:prometheus
  when: manual

test:
  stage: test
  services:
    - docker:18.09-dind
  script:
    - RAILS_ENV=$RAILS_ENV docker-compose pull
    - docker-compose up -d postgres elastic devproxy
    - docker-compose up -d mailcatcher redis
    - RAILS_ENV=$RAILS_ENV docker-compose up -d argu argu_worker
    - RAILS_ENV=$RAILS_ENV docker-compose up -d token token_worker frontend email email_worker
    - docker-compose run --rm testrunner bundle exec rake test:initialize_db
    - docker restart devproxy_argu_1
    - ./restart.sh devproxy || true
    - docker-compose run --rm argu bundle exec rake cache:warm
    - docker-compose run --rm testrunner bundle exec rake test:dump
    - docker restart devproxy_argu_worker_1
    - ./restart.sh devproxy || true
    - timeout 5m bash -c 'until [ $(docker ps -f name=devproxy_argu_1 -f health=healthy -q | wc -l) -gt 0 ]; do sleep 1; done'
    - docker ps -a
    - docker images
    - docker-compose exec -T frontend cat client_version.txt
    - docker-compose exec -T frontend cat server_version.txt
    - TEST_TIMEOUT=${TEST_TIMEOUT:-50m}
    - echo test timeout $TEST_TIMEOUT
    - timeout $TEST_TIMEOUT bash -c 'docker-compose run -e REDIS_URL --name testrunner testrunner'
  after_script:
    - mkdir $CI_PROJECT_DIR/test-results || true
    - docker cp testrunner:/tmp/test-results/rspec.xml $CI_PROJECT_DIR/test-results/rspec.xml || true
    - docker cp testrunner:/usr/src/app/tmp/exceptions $CI_PROJECT_DIR/test-results/exceptions || true
    - docker ps --no-trunc -a > $CI_PROJECT_DIR/test-results/docker-ps.txt || true
    - docker-compose logs > $CI_PROJECT_DIR/test-results/docker-compose-logs.txt || true
    - 'curl -H "Host: argu.localtest" -f http://localhost:3080/link-lib/cache/status > cache_health.txt || true'
    - 'curl -H "Host: argu.localtest" -f http://localhost:3080/d/health > libro_health.txt || true'
    - ls -la $CI_PROJECT_DIR/test-results
  artifacts:
    paths:
      - test-results/
      - docker-compose.yml
    expire_in: 1 week
    when: on_failure

stages:
  - ci_build
  - test
