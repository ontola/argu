version: v1.0
name: Pipeline
agent:
  machine:
    type: e1-standard-8
    os_image: ubuntu1804
blocks:
  - name: "Test"
    task:
      secrets:
        - name: GCP
        - name: bugsnag-secret
      prologue:
        commands:
          # Authenticate using the file injected from the secret
          - gcloud auth activate-service-account --key-file=.secrets/gcp.json
          # Don't forget -q to silence confirmation prompts
          - gcloud auth configure-docker -q
          - checkout
      jobs:
        - name: Testing
          commands:
            - sudo sh -c "echo '127.0.0.1 app.argu.localtest' >> /etc/hosts"
            - sudo sh -c "echo '127.0.0.1 argu.localtest' >> /etc/hosts"
            - echo "" > ./.env.dev
            - echo NEO_URL=${NEO_URL} >> ./.env.template
            - echo DEFAULT_LOCALE=en >> ./.env.template
            - sed -i "s/{bugsnag_key}/$BUGSNAG_KEY/g" ./.env.template
            - BACKEND_HOST=argu:3000 ./setup.sh
            - TESTRUNNER=true IP=127.0.0.1 HOST_IP=172.99.0.1 ENV=test ./setup_environment.rb
            - sudo chown -R $(whoami):$(whoami) ./ssl
            - "[[ $SEMAPHORE_GIT_BRANCH = master ]] && RAILS_ENV=production || RAILS_ENV=staging"
            - docker create -v /cfg --name certdata alpine:3.4 /bin/true
            - sudo chown -R $(whoami):$(whoami) ./devproxyCA
            - docker cp ./devproxyCA/cacert.pem certdata:/cacert.pem
            - RAILS_ENV=$RAILS_ENV docker-compose pull
            - docker-compose up -d elastic rabbitmq mockserver devproxy
            - docker-compose up -d sidekiq postgres mailcatcher redis
            - RAILS_ENV=$RAILS_ENV docker-compose up -d argu
            - RAILS_ENV=$RAILS_ENV docker-compose up -d token token_sidekiq deku vote_compare vote_compare_sidekiq frontend email email_subscriber email_sidekiq
            - docker exec devproxy_argu_1 sed -i -e 's/staging.argu.co/argu.localtest/g' public/packs/manifest.json
            - docker exec devproxy_argu_1 sed -i -e 's/argu.co/argu.localtest/g' public/packs/manifest.json
            - docker-compose build --build-arg "TEST_FILES=$TEST_FILES"
            - docker-compose run testrunner bundle exec rake test:setup
            - docker restart devproxy_argu_1
            - docker restart devproxy_sidekiq_1
            - ./restart.sh devproxy || true
            - until [ $(docker ps -f name=devproxy_argu_1 -f health=healthy -q | wc -l) -gt 0 ]; do sleep 1; done
            - docker ps
            - docker images
            - docker-compose run --name testrunner testrunner
      epilogue:
        on_fail:
          commands:
            - mkdir /tmp/test-results || true
            - docker cp testrunner:/tmp/test-results/rspec.xml /tmp/test-results/rspec.xml || true
            - docker cp testrunner:/usr/src/app/tmp/exceptions /tmp/test-results/exceptions || true
            - docker ps --no-trunc -a > /tmp/test-results/docker-ps.txt || true
            - docker-compose logs > /tmp/test-results/docker-compose-logs.tx || true
            - artifact push job /tmp/test-results
promotions:
  - name: Production deploy
    pipeline_file: production-deploy.yml
  - name: Staging deploy
    pipeline_file: staging-deploy.yml
    auto_promote_on:
      - result: passed
        branch:
          - develop
